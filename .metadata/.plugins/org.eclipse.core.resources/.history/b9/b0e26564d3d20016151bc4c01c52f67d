package LHP;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.rosuda.REngine.REXP;
import org.rosuda.REngine.REXPDouble;
import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.RList;
import org.rosuda.REngine.Rserve.RConnection;
import org.rosuda.REngine.Rserve.RserveException;

import com.vividsolutions.jts.geom.Coordinate;

import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.engine.schedule.ScheduledMethod;
import repast.simphony.space.gis.ShapefileWriter;

public class Watcher {

	Executor executor;
	RunEnvironment runEnvironment;
	static BufferedWriter summaryStats_out;//locations
	BufferedWriter individualMovements_out;
	BufferedWriter foodQuant_out;
	BufferedWriter foodPos_out;
	List<Baboon> primateList;
	ArrayList<Double> speeds,spreads,ratio,perpen,shapeRatio;
	static ArrayList<Integer> changeCounts;
	ArrayList<Coordinate> centers;
	static ArrayList<ArrayList> indPositions,foodQuant;
	static ArrayList<Double> foodPosX,foodPosY;
	double hour;
	static int[] followers;
	static int[] pastFollowers;
	
	static ArrayList<ArrayList> coreLists;
	static ArrayList<ArrayList> netStats;

	//output stats
	Coordinate lastCenter;

	public Watcher(Executor exe){

		executor = exe;
		runEnvironment = RunEnvironment.getInstance();
		primateList = ModelSetup.primatesAll;
		speeds = new ArrayList<Double>();
		ratio = new ArrayList<Double>();
		spreads = new ArrayList<Double>();
		centers = new ArrayList<Coordinate>();
		indPositions = new ArrayList<ArrayList>();
		hour = 1;
		foodPosX = new ArrayList<Double>();
		foodPosY = new ArrayList<Double>();
		foodQuant = new ArrayList<ArrayList>();
		perpen = new ArrayList<Double>();
		shapeRatio = new ArrayList<Double>();
		followers = new int[Parameter.groupSize];
		pastFollowers = new int[Parameter.groupSize];
		changeCounts = new ArrayList<Integer>();
		coreLists = new ArrayList<ArrayList>();
		netStats = new ArrayList<ArrayList>();

		Collections.sort(primateList,new CustomComparator());
		for(Primate p : primateList){
			//System.out.println("id "+ p.getId());
		}

		for(Primate p : primateList){
			//System.out.println("id "+ p.getId());
		}

		//creating a file to store the output of the counts
		try {
			summaryStats_out = new BufferedWriter(new FileWriter("summary_stats_"+Parameter.groupSize+"_sT"+Parameter.safetyLowThresh+"_eT"+Parameter.energyLowThresh+".csv",false));
		} catch (IOException e) {
			e.printStackTrace();
		}

	}


	/********************************	
	 * 								*
	 *         Stepper				*
	 * 								*
	 *******************************/

	@ScheduledMethod(start=26, interval = 1,priority=0)
	public void step(){

		//	to do every tick
			//nothing at the moment

		//	to do every X steps
		if(RunEnvironment.getInstance().getCurrentSchedule().getTickCount()%(Parameter.post_delta_T)==0){
			calculateStatistics();
//			for(Primate p:ModelSetup.getAllPrimateAgents()){
//				System.out.println(p.getId() + " is following "+p.followMate.getId());
//			}
//			System.out.println("next sample");
//			hour++;
		}

		//	to do at the end of the simulation
		if(RunEnvironment.getInstance().getCurrentSchedule().getTickCount()>=Parameter.stepsPerDay*Parameter.endDay){
			executor.shutdown();
			RunEnvironment.getInstance().endAt(this.runEnvironment.getCurrentSchedule().getTickCount());
			outputData();
			System.out.println("End of sim");
		}
	}

	
	/***********************************************************************
	 * 
	 *  Methods for calculating outputs from the model  
	 * 
	 * 
	 ***********************************************************************/
	
	private static void calculateStatistics(){
		
		setPastFollowers();
		setCurrentFollowers();
		measureChangedCounts();
		calculateNet();
		
	}
	
	private static void setPastFollowers(){
		
		for(int i =0; i < followers.length;i++){
			pastFollowers[i] = followers[i];
		}
		
	}
	
	private static void setCurrentFollowers(){
		
		//set current to past
		//pastFollowers = followers;
		
		//update current partner
		for(int i=0; i < Parameter.groupSize;i++){
			
			Primate pFocal = ModelSetup.orderedP.get(i);
			
			if(pFocal.followMate!=null){
				int pPart = pFocal.followMate.getId();
				
				if(pPart!=pFocal.getId()){
					followers[i]=pPart;	
				} else {
					followers[i] = -1;
				}
				
			} else {
				followers[i] = -1;
			}
		}
	}
	
	private static void measureChangedCounts(){
		
		int changeCount=0;
		for(int i = 0 ; i < Parameter.groupSize ; i++){
			if(followers[i]!=pastFollowers[i])changeCount++;
		}
		changeCounts.add(changeCount);
		
	}
	
	private static void calculateNet(){
		
			try {
				//open new R connection
				RConnection c = new RConnection();
				REXP alphaC,clus,bet,coreR,degM,deg,comp;
				//RList coreL;
				
				
				//create the network
				c.eval("library(igraph)");
				c.assign("num.nodes", Integer.toString(Parameter.groupSize));
				c.eval("g1<-graph.empty(num.nodes,directed = T)");
				for(int i = 0 ; i < Parameter.groupSize ; i++){
					c.assign("fromP", Integer.toString(i+1));
					c.assign("toP", Integer.toString(followers[i]+1));
					if(followers[i]>-1)c.eval("g1<-add.edges(g1,c(fromP,toP))");
				}
				
				ArrayList<Double> netStat = new ArrayList<Double>();
				
				try{
				//calculate alpha centrality (avg)
				c.eval("alpha<-mean(alpha.centrality(g1))");
				alphaC = c.eval("alpha");
				netStat.add(alphaC.asDouble());
				} catch (RserveException t){
					netStat.add(-999.99);
				}
				
				//calculate clustering coef
				c.eval("clus<-transitivity(g1)");
				clus = c.eval("clus");
				netStat.add(clus.asDouble());
				
				//calculate betweenness centrality (avg)
				c.eval("bet<-mean(betweenness(g1))");
				bet = c.eval("bet");
				netStat.add(bet.asDouble());
				
				//calculate max in degree
				c.eval("degM<-max(degree(g1))");
				degM = c.eval("degM");
				netStat.add(degM.asDouble());
				
				//calculate avg in degree
				c.eval("deg<-mean(degree(g1))");
				deg = c.eval("deg");
				netStat.add(deg.asDouble());
				
				//calculate avg in degree
				c.eval("clu<-components(g1)");
				comp = c.eval("clu$no");
				netStat.add(comp.asDouble());
				
				//calculate Corness (RList not working?? trying this ugly way)
				ArrayList<Double> coreList = new ArrayList<Double>();
				c.eval("coreVal <- coreness(g1, mode='in')");
				for(int i = 1;i<=Parameter.groupSize;i++){
					//set index
					c.assign("count", Integer.toString(i));
					//get coreness value
					REXP co = c.eval("coreVal[as.numeric(count)]");
					//save coreness value
					coreList.add(co.asDouble());
				}
				
//				RList coreL = c.eval("coreness(g1)").asList();
//				for(int i = 0 ; i < coreL.size() ; i++){
//					coreList.add(coreL.at(i).asDouble());
//				}
				
				//keep the estimates in an array
				netStats.add(netStat);
				coreLists.add(coreList);
				
				
				//close the connection
				c.close();
			} catch (RserveException e) {
				//TODO Auto-generated catch block
				e.printStackTrace();
			} catch (REXPMismatchException ee){
				ee.printStackTrace();
			}
		
	}
	
	
	
	private static void outputData(){
		
		try {
			//setup headers
			summaryStats_out.append("time,changeD,alpha,clus,bet,deg,degM,components");
			for(int i = 0 ; i < Parameter.groupSize ; i++){
				summaryStats_out.append("core");
				summaryStats_out.append(Integer.toString(i));
				summaryStats_out.append(",");
			}
			summaryStats_out.newLine();
			
			//write out data
			for(int i = 0 ; i<netStats.size();i++){
				summaryStats_out.append(((Integer)(i*Parameter.post_delta_T)).toString());
				summaryStats_out.append(",");
				summaryStats_out.append(((Integer)(changeCounts.get(i))).toString());
				summaryStats_out.append(",");
				summaryStats_out.append(((Double)netStats.get(i).get(0)).toString());
				summaryStats_out.append(",");
				summaryStats_out.append(((Double)netStats.get(i).get(1)).toString());
				summaryStats_out.append(",");
				summaryStats_out.append(((Double)netStats.get(i).get(2)).toString());
				summaryStats_out.append(",");
				summaryStats_out.append(((Double)netStats.get(i).get(3)).toString());
				summaryStats_out.append(",");
				summaryStats_out.append(((Double)netStats.get(i).get(4)).toString());
				summaryStats_out.append(",");
				summaryStats_out.append(((Double)netStats.get(i).get(5)).toString());
				summaryStats_out.append(",");
				
				for(int j = 0 ; j < Parameter.groupSize ; j++){
					summaryStats_out.append(((Double)(coreLists.get(i).get(j))).toString());
					summaryStats_out.append(",");
				}
				summaryStats_out.newLine();
			}
			
			//flush the data and close the writer
			summaryStats_out.flush();
			summaryStats_out.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	

	public class CustomComparator implements Comparator<Primate> {
		@Override
		public int compare(Primate o1, Primate o2) {
			int retval = 1;
			if(o1.getId()<o2.getId())retval=0;
			return retval;
		}
	}

	
}
