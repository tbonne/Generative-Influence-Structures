package LHP;

import cern.jet.random.VonMises;
import cern.jet.random.engine.MersenneTwister64;
import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.parameter.Parameters;

public class Parameter {
	
	final static Parameters p = RunEnvironment.getInstance().getParameters();
	
	//simulation settings
	public final static String agent_context = "cellContext";
	public final static String geog = "geog";
	public static int randomSeed = 1847620; 			//adjusted in constructor
	public static int numbOfThreads = 8;				//multipule of # of cores (e.g. 8 * 2 = 16)
	public static boolean groupProcess = false;			//sub-groups of agents processed separately, or all agents passed through each separate process
	public static MersenneTwister64 mt = new MersenneTwister64();	// random number generator
	
	//Watcher agent (for observations)
	public final static double stepsPerDay = 60*60*8;	//1 sec interval //each step represents 1 min (1min*60*12), for a total of 12hours of active time per day  //48*4
	public final static double recordingFreq = 60*10;	
	public final static int endDay = 3;		 			// will run the simulation until it has completed this many days
	
	//primate: population
	public static int groupSize = 20;						//number of individuals in a group
	public static int numbOfGroups=1;						//number of groups
	public static int maxInitialGroupDistance = 100;        //radius of the initial group (m) (starting conditions)
	
	//primate: movement
	public static double visual_range = 50;					//range at which individuals can see food patches
	public static double attractionWeight = 4;
	public static double repulsionWeight = 2;
	public static double bearingWeight = 2;
	public static double foodWeight = 1;
	public static double attractionDistMax = 10;
	public static double repulsionDistMax = 10;
	
	//primate: following behaviour
	public static double chooseSelf = 0.0;
	public static double fam_deg = 0.01;					//degradation in familiarity each step
	public static double minPrimateFamiliarity = 0.1;		//minimum familiarity value of a primate (lower more resistance to following novel primates)
	
	//primate: reinforcement
	public static double energyLowThresh = 0.1;				//bites per minute at which the individual focuses on increasing foraging intake
	public static double safetyLowThresh = 0.2;				//safety value at which the individual focuses on decreasing isolation
	public static int post_delta_T = 500;					//number of steps between taking an action and assessing it's quality
	
	//primate: energetics
	public static double biteSize = 0.01;					//Amount of food reduced per time step
	public static double minPatchFamiliarity = 0.1;			//minimum familiarity value of a patch (lower more resistance to using novel patches)
	
	//Food landscape
	public static double envHomogen = 1;
	public static int landscapeWidth = 1000;				//width and length of the landscape meters /10000
	public static int landscapeHeight = 1000;				//width and length of the landscape meters /10000
	public static double foodBuffer = 1;					//size of the food patch radius in meters
	public static double foodDensity = 0.01;              	//avg number of food patches within 1m2 area
	public static double regrowthRate = 0.0001;				//rate at which regrowth occurs
	public static double cellChangeRate = 0.0001;				//rate of decrease in cell familiarity over time


	//Constructor: used to set values from batch runs or the GUI
	public Parameter(){
		
		randomSeed = (Integer)p.getValue("randomSeed");

		//landscape
		visual_range = (Double)p.getValue("visual_range");//
		attractionWeight = (Double)p.getValue("attractionWeight");//
		repulsionWeight = (Double)p.getValue("repulsionWeight");//
		bearingWeight = (Double)p.getValue("bearingWeight");//
		foodWeight = (Double)p.getValue("foodWeight");//
		attractionDistMax = (Double)p.getValue("attractionDistMax");//
		repulsionDistMax = (Double)p.getValue("repulsionDistMax");//
		landscapeWidth = (Integer)p.getValue("landscapeWidth"); //
		landscapeHeight = (Integer)p.getValue("landscapeHeight");//
		numbOfGroups = (Integer)p.getValue("numbOfGroups");//
		groupSize = (Integer)p.getValue("groupSize");//
		foodBuffer = (Double)p.getValue("foodBuffer"); //
		foodDensity = (Double)p.getValue("foodDensity"); //
		biteSize = (Double)p.getValue("biteSize"); //
		
	}
	
}
